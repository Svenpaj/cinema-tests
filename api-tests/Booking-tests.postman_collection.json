{
	"info": {
		"_postman_id": "5e9da3c8-2cc1-4443-8888-673feb1c5dbb",
		"name": "Booking-tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24654178"
	},
	"item": [
		{
			"name": "Get occupied seats",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.set('id', 97);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = pm.response.json()\r",
							"    pm.test('Expect status code 200', () => {\r",
							"        pm.expect(pm.response.code).to.equal(200)\r",
							"    });\r",
							"\r",
							"let occupiedSeats = res[0].occupiedSeats.split(\", \").map(x => +x);\r",
							"\r",
							"console.log(occupiedSeats);\r",
							"\r",
							"let availSeats = [];\r",
							"for (let i = 1; i < 82; i++) {\r",
							"    !occupiedSeats.includes(i) && availSeats.push(i);\r",
							"};\r",
							"console.log(availSeats);\r",
							"\r",
							"pm.environment.set('availSeats', JSON.stringify(availSeats));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/occupied_seats/?screeningId={{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"occupied_seats",
						""
					],
					"query": [
						{
							"key": "screeningId",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create booking",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let bookingsObject = {\r",
							"    \"bookingNumber\": \"EWJ533\",\r",
							"    \"screeningId\": 97,\r",
							"    \"userId\": 40 \r",
							"}\r",
							"\r",
							"pm.environment.set('mockData', JSON.stringify(bookingsObject));\r",
							"\r",
							"let mockData = JSON.parse(pm.environment.get('mockData'))\r",
							"\r",
							"for(let [key,val] of Object.entries(mockData)){\r",
							"    pm.environment.set(key,val)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = pm.response.json()\r",
							"console.log(res);\r",
							"pm.test(\"Expected status code 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"})\r",
							"\r",
							"pm.test(\"check that affeted rows is 1\", () => {\r",
							"    pm.expect(res.affectedRows).to.equal(1)\r",
							"})\r",
							"\r",
							"\r",
							"let mockData = JSON.parse(pm.environment.get('mockData'))\r",
							"mockData.id = res.insertId\r",
							"pm.environment.set('mockData', JSON.stringify(mockData))"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"bookingNumber\": \"{{bookingNumber}}\",\r\n  \"screeningId\": \"{{screeningId}}\",\r\n  \"userId\": \"{{userId}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/bookings",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookings"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book seats",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let openSeats = JSON.parse(pm.environment.get(\"availSeats\"));\r",
							"\r",
							"\r",
							"if(!pm.environment.get('seatData')){\r",
							"    pm.environment.set('seatData', JSON.stringify([\r",
							"    {\r",
							"        \"bookingId\": \"null\",\r",
							"        \"seatId\": openSeats[0],\r",
							"        \"ticketTypeId\": 3 \r",
							"    },\r",
							"    {\r",
							"        \"bookingId\": \"null\",\r",
							"        \"seatId\": openSeats[1],\r",
							"        \"ticketTypeId\": 3 \r",
							"    }\r",
							"    ]))\r",
							"     pm.environment.set('seatIndex', \"0\")\r",
							"};\r",
							"\r",
							"\r",
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"let seatData = JSON.parse(pm.environment.get('seatData'));\r",
							"let seatIndex = +pm.environment.get('seatIndex');\r",
							"let seat = seatData[seatIndex];\r",
							"\r",
							"\r",
							"seat.bookingId = +mockData.id;\r",
							"seatData[seatIndex] = seat;\r",
							"pm.environment.set('seatData', JSON.stringify(seatData));\r",
							"\r",
							"for(let [key,val] of Object.entries(seat)){\r",
							"    pm.environment.set(key,val)\r",
							"}"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = pm.response.json()\r",
							"console.log(res);\r",
							"pm.test(\"Expected status code 200\", () => {\r",
							"    pm.expect(pm.response.code).to.equal(200)\r",
							"})\r",
							"\r",
							"pm.test(\"check that affected rows is 1\", () => {\r",
							"    pm.expect(res.affectedRows).to.equal(1)\r",
							"})\r",
							"\r",
							"\r",
							"let seatData = JSON.parse(pm.environment.get('seatData'));\r",
							"let seatIndex = +pm.environment.get('seatIndex');\r",
							"let seat = seatData[seatIndex];\r",
							"seat.id = res.insertId\r",
							"seatData[seatIndex] = seat;\r",
							"pm.environment.set('seatData', JSON.stringify(seatData));\r",
							"\r",
							"seatIndex++\r",
							"\r",
							"if(!seatData[seatIndex]) {\r",
							"    pm.environment.set('seatIndex', 0)\r",
							"}\r",
							"else {\r",
							"    pm.environment.set('seatIndex', seatIndex)\r",
							"    postman.setNextRequest(\"Book seats\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"bookingId\": \"{{bookingId}}\",\r\n    \"seatId\": {{seatId}},\r\n    \"ticketTypeId\": {{ticketTypeId}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:4000/api/bookingsxseats",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookingsxseats"
					]
				}
			},
			"response": []
		},
		{
			"name": "Check occupied seats",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"\r",
							"pm.environment.set('id', mockData.screeningId);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = pm.response.json();\r",
							"let seatData = JSON.parse(pm.environment.get('seatData'));\r",
							"\r",
							"pm.test('expect status code 200', () => {\r",
							"    pm.expect(pm.response.code).to.be.equal(200);\r",
							"});\r",
							"console.log(res);\r",
							"\r",
							"pm.test('expect occupied_seats to include booked seat', () => {\r",
							"    pm.expect(res[0].occupiedSeats).to.include(seatData[0].seatId)\r",
							"    pm.expect(res[0].occupiedSeats).to.include(seatData[1].seatId)\r",
							"\r",
							"})\r",
							"\r",
							"//pm.expect(pm.response.text()).to.include(\"customer_id\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/occupied_seats/?screeningId={{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"occupied_seats",
						""
					],
					"query": [
						{
							"key": "screeningId",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Check bookings",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let mockData = JSON.parse(pm.environment.get('mockData'));\r",
							"\r",
							"pm.environment.set('id', mockData.bookingNumber);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let res = pm.response.json();\r",
							"let seatData = JSON.parse(pm.environment.get('seatData'));\r",
							"\r",
							"pm.test('expect status code 200', () => {\r",
							"    pm.expect(pm.response.code).to.be.equal(200);\r",
							"});\r",
							"console.log(res);\r",
							"\r",
							"pm.test('expect that we have one booking with two seats', () => {\r",
							"    pm.expect(res[0].seats).to.include(seatData[0].seatId)\r",
							"    pm.expect(res[0].seats).to.include(seatData[1].seatId)\r",
							"\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:4000/api/bookings_overview?bookingNumber={{id}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "4000",
					"path": [
						"api",
						"bookings_overview"
					],
					"query": [
						{
							"key": "bookingNumber",
							"value": "{{id}}"
						}
					]
				}
			},
			"response": []
		}
	]
}